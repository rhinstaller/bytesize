#!/usr/bin/python
#
# makebumpver - Increment version number and add in RPM spec file changelog
#               block.  Ensures rhel*-branch commits reference RHEL bugs.
#
# Copyright (C) 2009-2013  Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: David Cantrell <dcantrell@redhat.com>

import logging
logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger("bugzilla")
log.setLevel(logging.INFO)
urllib_log = logging.getLogger("urllib3")
urllib_log.setLevel(logging.ERROR)

import argparse
import bugzilla
import datetime
import getpass
import os
import re
import subprocess
import sys
import textwrap

class ReplacementError(Exception):
    """ Error occurring when replacing string in file. """
    pass

class ParsingError(Exception):
    """ Error occurring when parsing file. """
    pass

class MakeBumpVer:
    def __init__(self, **kwargs):
        log.debug("%s", kwargs)
        self.bzserver = 'bugzilla.redhat.com'
        self.bzurl = "https://%s/xmlrpc.cgi" % self.bzserver
        self.username = None
        self.password = None
        self.bz = None
        self._bz_cache = {}

        authfile = os.path.realpath(os.getenv('HOME') + '/.rhbzauth')
        if os.path.isfile(authfile):
            f = open(authfile, 'r')
            lines = map(lambda x: x.strip(), f.readlines())
            f.close()

            for line in lines:
                if line.startswith('RHBZ_USER='):
                    self.username = line[10:].strip('"\'')
                elif line.startswith('RHBZ_PASSWORD='):
                    self.password = line[14:].strip('"\'')

        self.gituser = self._gitConfig('user.name')
        self.gitemail = self._gitConfig('user.email')

        self.name = kwargs.get('name')
        self.fixedin_name = kwargs.get('fixedin', self.name)
        self.version = kwargs.get('version')
        self.release = kwargs.get('release')
        self.ignore = kwargs.get('ignore')

        self.bugmap = {}
        bugmap = kwargs.get('bugmap')
        if bugmap and bugmap != '':
            maps = bugmap.split(',')
            for mapping in maps:
                bugs = mapping.split('=')
                if len(bugs) == 2:
                    self.bugmap[bugs[0]] = bugs[1]

        self.configure = kwargs.get('configure')
        self.spec = kwargs.get('spec')
        self.version_files = kwargs.get('version_files')

        # RHEL release number or None
        self.rhel = self._isRHEL()

    def _gitConfig(self, field):
        proc = subprocess.Popen(['git', 'config', field],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE).communicate()
        return proc[0].strip('\n')

    def _incrementVersion(self):
        fields = self.version.split('.')
        fields[-1] = str(int(fields[-1]) + 1)
        new = ".".join(fields)
        return new

    def _isRHEL(self):
        proc = subprocess.Popen(['git', 'branch'],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE).communicate()
        lines = filter(lambda x: x.startswith('*'),
                       proc[0].strip('\n').split('\n'))

        if lines == [] or len(lines) > 1:
            return False

        fields = lines[0].split(' ')

        if len(fields) == 2 and fields[1].startswith('rhel'):
            branch_pattern=r"^rhel(\d+)-(.*)"
            m = re.match(branch_pattern, fields[1])
            if m:
                return m.group(1)
        return False

    def _getCommitDetail(self, commit, field):
        proc = subprocess.Popen(['git', 'log', '-1',
                                 "--pretty=format:%s" % field, commit],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE).communicate()

        ret = proc[0].strip('\n').split('\n')

        if len(ret) == 1 and ret[0].find('@') != -1:
            ret = [ret[0].split('@')[0]]
        elif len(ret) == 1:
            ret = [ret[0]]
        else:
            ret = filter(lambda x: x != '', ret)

        return ret

    def _queryBug(self, bugid):
        if not self.bz:
            sys.stdout.write("Connecting to %s...\n" % self.bzserver)

            if not self.username:
                sys.stdout.write('Username: ')
                self.username = sys.stdin.readline()
                self.username = self.username.strip()

            if not self.password:
                self.password = getpass.getpass()

            bzclass = bugzilla.Bugzilla
            self.bz = bzclass(url=self.bzurl)
            print

        if not self.bz.logged_in:
            rc = self.bz.login(self.username, self.password)
            log.debug("login rc = %s", rc)

        if bugid in self._bz_cache:
            return self._bz_cache[bugid]

        bug = self.bz.getbug(bugid, extra_fields="flags")
        log.debug("bug = %s", bug)

        if not bug:
            return None
        else:
            self._bz_cache[bugid] = bug
            return bug

    def _isRHELBug(self, bug, commit, summary):
        bzentry = self._queryBug(bug)

        if not bzentry:
            print("*** Bugzilla query for %s failed.\n" % bug)
            return False

        if bzentry.product.startswith('Red Hat Enterprise Linux'):
            return True
        else:
            print("*** Bug %s is not a RHEL bug." % bug)
            print("***     Commit: %s" % commit)
            print("***     %s\n" % summary)
            return False

    def _isRHELBugInCorrectState(self, bug, commit, summary):
        bzentry = self._queryBug(bug)

        if not bzentry:
            print("*** Bugzilla query for %s failed.\n" % bug)
            return False

        if bzentry.bug_status in ['MODIFIED', 'ON_QA']:
            return True
        else:
            print("*** Bug %s is not in MODIFIED or ON_QA." % bug)
            print("***     Commit: %s" % commit)
            print("***     %s\n" % summary)
            return False

    def _isRHELBugFixedInVersion(self, bug, commit, summary, fixedIn):
        bzentry = self._queryBug(bug)

        if not bzentry:
            print("*** Bugzilla query for %s failed.\n" % bug)
            return False

        if bzentry.fixed_in == fixedIn:
            return True
        else:
            print("*** Bug %s does not have correct Fixed In Version." % bug)
            print("***     Found:     %s" % bzentry.fixed_in)
            print("***     Expected:  %s" % fixedIn)
            print("***     Commit:    %s" % commit)
            print("***     %s\n" % summary)
            return False

    def _isRHELBugAcked(self, bug, commit, summary):
        """ Check the bug's ack state
        """
        if not self.rhel:
            return True

        bzentry = self._queryBug(bug)
        ack_pattern=r"rhel-%s\.\d+\.\d+" % self.rhel
        for f in bzentry.flags:
            if re.match(ack_pattern, f['name']) and f['status'] == '+':
                return True

        print("*** Bug %s does not have ACK" % bug)
        print("***     Commit: %s" % commit)
        print("***     %s\n" % summary)
        return False

    def _rpmLog(self, fixedIn):
        git_range = "%s-%s-%s.." % (self.name, self.version, self.release)
        proc = subprocess.Popen(['git', 'log', '--pretty=oneline', git_range],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE).communicate()
        lines = filter(lambda x: x.find('l10n: ') != 41 and \
                                 x.find('Merge commit') != 41 and \
                                 x.find('Merge branch') != 41,
                       proc[0].strip('\n').split('\n'))

        if self.ignore:
            ignore_commits = self.ignore.split(',')
            lines = [l for l in lines if not any(l.startswith(c) for c in ignore_commits)]

        rpm_log = []
        bad_bump = False
        bad = False

        for line in lines:
            if not line:
                continue
            fields = line.split(' ')
            commit = fields[0]

            summary = self._getCommitDetail(commit, "%s")[0]
            body = self._getCommitDetail(commit, "%b")
            author = self._getCommitDetail(commit, "%aE")[0]

            if self.rhel:
                rhbz = set()
                bad = False

                # look for a bug in the summary line, validate if found
                m = re.search(r"\(#\d+(\,.*)*\)", summary)
                if m:
                    fullbug = summary[m.start():m.end()]
                    bugstr = summary[m.start()+2:m.end()-1]

                    bug = ''
                    for c in bugstr:
                        if c.isdigit():
                            bug += c
                        else:
                            break

                    if len(bugstr) > len(bug):
                        tmp = bugstr[len(bug):]

                        for c in tmp:
                            if not c.isalpha():
                                tmp = tmp[1:]
                            else:
                                break

                        if len(tmp) > 0:
                            author = tmp

                    ckbug = self.bugmap.get(bug, bug)
                    valid = self._isRHELBug(ckbug, commit, summary)

                    if valid:
                        summary = summary.replace(fullbug, "(%s)" % author)
                        rhbz.add("Resolves: rhbz#%s" % ckbug)

                        if not self._isRHELBugInCorrectState(ckbug, commit,
                                                             summary):
                            bad = True

                        if not self._isRHELBugFixedInVersion(ckbug, commit,
                                                             summary, fixedIn):
                            bad = True

                        if not self._isRHELBugAcked(ckbug, commit, summary):
                            bad = True
                    else:
                        bad = True
                    summary_bug = ckbug
                else:
                    summary = summary.strip()
                    summary += " (%s)" % author
                    summary_bug = None

                for bodyline in body:
                    m = re.match(r"^(Resolves|Related|Conflicts):\ +rhbz#\d+.*$",
                                 bodyline)
                    if not m:
                        continue

                    actionre = re.search("(Resolves|Related|Conflicts)",
                                         bodyline)
                    bugre = re.search(r"\d+", bodyline)
                    if actionre and bugre:
                        action = actionre.group()
                        bug = bugre.group()
                        ckbug = self.bugmap.get(bug, bug)
                        valid = self._isRHELBug(ckbug, commit, summary)

                        if valid:
                            rhbz.add("%s: rhbz#%s" % (action, ckbug))

                            # Remove the summary bug's Resolves action if it is for the same bug
                            if action != 'Resolves':
                                summary_str = "Resolves: rhbz#%s" % summary_bug
                                if summary_bug and ckbug == summary_bug and summary_str in rhbz:
                                    rhbz.remove(summary_str)
                        else:
                            bad = True

                        if valid and action == 'Resolves' and \
                           (not self._isRHELBugInCorrectState(ckbug, commit,
                                                              summary) or \
                            not self._isRHELBugFixedInVersion(ckbug, commit,
                                                              summary,
                                                              fixedIn) or \
                            not self._isRHELBugAcked(ckbug, commit, summary)):
                            bad = True
                        elif valid and action == 'Related' and \
                            self._isRHELBugAcked(ckbug, commit, summary):
                            print("*** Bug %s Related commit %s is allowed\n" % (bug, commit))
                            # Related bugs only need to be valid and have an ack
                            bad = False

                if len(rhbz) == 0:
                    print("*** No bugs referenced in commit %s\n" % commit)
                    bad = True

                rpm_log.append((summary.strip(), list(rhbz)))
            else:
                rpm_log.append(("%s (%s)" % (summary.strip(), author), None))

            if bad:
                bad_bump = True

        if bad_bump:
            sys.exit(1)

        return rpm_log

    def _replaceString(self, lines, search, replace):
        """ find first occurrence of search and replace it with replace

            :raise ReplacementError: if unable to perform replacement
        """
        for i, l in enumerate(lines):
            if l.find(search) > -1:
                break
        else:
            raise ReplacementError("Failed to replace '%s' with '%s'" % (search, replace))

        lines[i] = re.sub(search, replace, lines[i]) # pylint: disable=undefined-loop-variable

    def _writeNewSpec(self, newVersion, rpmlog):
        f = open(self.spec, 'r')
        l = f.readlines()
        f.close()

        try:
            self._replaceString(
               l,
               "Version: %s\n" % (self.version),
               "Version: %s\n" % (newVersion)
            )
        except ReplacementError as e:
            print("Failure while modifying file %s." % self.spec)
            print(e)
            sys.exit(1)

        i = l.index('%changelog\n')
        top = l[:i]
        bottom = l[i+1:]

        f = open(self.spec, 'w')
        f.writelines(top)

        f.write("%changelog\n")
        today = datetime.date.today()
        stamp = today.strftime("%a %b %d %Y")
        f.write("* %s %s <%s> - %s-%s\n" % (stamp, self.gituser, self.gitemail,
                                            newVersion, self.release))

        for msg, rhbz in rpmlog:
            msg = re.sub('(?<!%)%%(?!%)|(?<!%%)%(?!%%)', '%%', msg)
            sublines = textwrap.wrap(msg, 77)
            f.write("- %s\n" % sublines[0])

            if len(sublines) > 1:
                for subline in sublines[1:]:
                    f.write("  %s\n" % subline)

            if rhbz:
                for entry in rhbz:
                    f.write("  %s\n" % entry)

        f.write("\n")
        f.writelines(bottom)
        f.close()

    def _getNewVersionFile(self, filename, template, newVersion):
        """ Replace a version string in a file, using template to match
            string to replace and to create new string.
        """
        f = open(filename, 'r')
        l = f.readlines()
        f.close()

        try:
            self._replaceString(
               l,
               template % self.version,
               template % newVersion
            )
        except ReplacementError as e:
            raise ReplacementError("Failure while modifying file %s.: %s" % (filename, e))

        return l

    def run(self):
        """ Construct new spec file w/ changelog and updated version.

            Replace version strings in other files.
        """
        newVersion = self._incrementVersion()

        try:
            file_contents = [(f, self._getNewVersionFile(f, t, newVersion)) for f, t in self.version_files]
        except ReplacementError as e:
            print(e)
            sys.exit(1)

        fixedIn = "%s-%s-%s" % (self.fixedin_name, newVersion, self.release)
        rpmlog = self._rpmLog(fixedIn)
        self._writeNewSpec(newVersion, rpmlog)

        for filename, contents in file_contents:
            f = open(filename, 'w')
            f.writelines(contents)
            f.close()

def replacement_patterns(pattern_path):
    """ A generator of filename, pattern pairs.

        :param str pattern_path: path to file containing filename, pattern specs
    """
    with open(pattern_path) as patterns:
        pair = []
        for line in patterns:
            line = line.strip()
            if len(pair) < 2:
                pair.append(line)
            else:
                yield pair
                pair = [line]
        if len(pair) == 2:
            yield pair
        elif len(pair) != 0:
            raise ParsingError("Parsing error while reading pattern file %s." % pattern_path)

def main():
    parser = argparse.ArgumentParser(
       description="Bump package version numbers.",
       epilog="""The -i switch is intended for use with utility commits that
          we do not need to reference in the spec file changelog.  The -m
          switch is used to map a Fedora BZ number to a RHEL BZ number for
          the spec file changelog.  Use -m if you have a commit that needs to
          reference a RHEL bug and have cloned the bug, but the original commit
          was already pushed to the central repo.
       """)

    parser.add_argument('-n', '--name', action='store',
       default=None, help='Package name')
    parser.add_argument('-v', '--version', action='store',
       default=None, help='Current package version number.')
    parser.add_argument('-r', '--release', action='store',
       default=None, help='Package release number.')
    parser.add_argument('-i', '--ignore', action='store',
       default=None, help='Comma separated list of git commits to ignore.')
    parser.add_argument('-m', '--map', action='store',
       default=None, help='Comma separated list of FEDORA_BZ=RHEL_BZ mappings.')
    parser.add_argument('-d', '--debug', action='store_true',
       default=False, help='Turn on debug logging to stdout.')
    parser.add_argument('-s', '--spec', action='store',
       default=None, help='Spec file name.')
    parser.add_argument('-p', '--pattern', action='store',
       default='scripts/version_files.txt',
       help='Version pattern and filename path.')

    args=parser.parse_args()

    if args.debug:
        log.setLevel(logging.DEBUG)
        urllib_log.setLevel(logging.DEBUG)

    if not args.name:
        sys.stderr.write("Missing required -n/--name option\n")
        sys.exit(1)

    if not args.version:
        sys.stderr.write("Missing required -v/--version option\n")
        sys.exit(1)

    if not args.release:
        sys.stderr.write("Missing required -r/--release option\n")
        sys.exit(1)

    if not args.spec:
        sys.stderr.write("Missing required -s/--spec option\n")
        sys.exit(1)

    if not args.pattern:
        sys.stderr.write("Missing required -p/--pattern option\n")
        sys.exit(1)

    cwd = os.getcwd()

    spec = os.path.realpath(os.path.join(cwd, args.spec))
    if not os.path.isfile(spec):
        sys.stderr.write("Unable to locate specfile %s.\n" % spec)
        sys.stderr.write("You must be at the top level of the package source tree.\n")
        sys.exit(1)

    pattern_file = os.path.realpath(os.path.join(cwd, args.pattern))
    if not os.path.isfile(pattern_file):
        sys.stderr.write("Unable to locate pattern file %s.\n" % pattern_file)
        sys.exit(1)

    try:
        version_files = [(os.path.realpath(os.path.join(cwd, p[0])), p[1]) for p in replacement_patterns(pattern_file)]
    except ParsingError as e:
        print(e)
        sys.exit(1)

    mbv = MakeBumpVer(
       name=args.name,
       version=args.version,
       release=args.release,
       ignore=args.ignore,
       bugmap=args.map,
       spec=spec,
       version_files=version_files,
       fixedin="python-"+args.name
    )
    mbv.run()

if __name__ == "__main__":
    main()
